// <auto-generated />
using System;
using GerenciadorTarefas.Infra.Data.Contextos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GerenciadorTarefas.Infra.Data.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.HistoricoAlteracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("HistoricoAlteracaoId");

                    b.Property<string>("Campo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("De")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Para")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TarefaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TarefaId");

                    b.ToTable("HistoricoAlteracoes");
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProjetoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projetos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea2e398f-dcc9-4be2-b30a-0f238eb998dd"),
                            Nome = "Projeto Gupy "
                        },
                        new
                        {
                            Id = new Guid("b428a25b-28db-4190-8033-eedc63efc129"),
                            Nome = "Projeto Tots"
                        });
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Tarefa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TarefaId");

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Prioridade")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjetoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tarefas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("763203b8-ce0f-489a-867b-89cdfd48d77d"),
                            DataVencimento = new DateTime(2025, 5, 16, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3568),
                            Descricao = "cadastrar o usuário do José no dominio.",
                            Prioridade = 1,
                            ProjetoId = new Guid("ea2e398f-dcc9-4be2-b30a-0f238eb998dd"),
                            Status = 1,
                            Titulo = "Cadastrar usuário na rede",
                            UsuarioId = new Guid("26771815-19a3-4876-b934-f5696a9a58f2")
                        },
                        new
                        {
                            Id = new Guid("ee73321d-4cb2-4a82-b8b5-82f4926d78f7"),
                            DataVencimento = new DateTime(2025, 5, 21, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3586),
                            Descricao = "Precisamos criar email para a maria participar do projeto",
                            Prioridade = 1,
                            ProjetoId = new Guid("ea2e398f-dcc9-4be2-b30a-0f238eb998dd"),
                            Status = 1,
                            Titulo = "Criar email para a PO Maria",
                            UsuarioId = new Guid("26771815-19a3-4876-b934-f5696a9a58f2")
                        },
                        new
                        {
                            Id = new Guid("b187b582-f80d-404f-91fc-6fae9d1b65c4"),
                            DataVencimento = new DateTime(2025, 5, 21, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3591),
                            Descricao = "Essa é uma tarefa para versionar o código do projeto no GIT",
                            Prioridade = 1,
                            ProjetoId = new Guid("ea2e398f-dcc9-4be2-b30a-0f238eb998dd"),
                            Status = 1,
                            Titulo = "Criar novo repositório para o gerenciador de tarefas",
                            UsuarioId = new Guid("26771815-19a3-4876-b934-f5696a9a58f2")
                        },
                        new
                        {
                            Id = new Guid("afbe0916-ba9c-4ab4-a9b3-d4c407971f5d"),
                            DataVencimento = new DateTime(2025, 5, 21, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3594),
                            Descricao = "Essa é uma tarefa para cadastrar usuários no banco de dados",
                            Prioridade = 1,
                            ProjetoId = new Guid("ea2e398f-dcc9-4be2-b30a-0f238eb998dd"),
                            Status = 1,
                            Titulo = "Cadastrar Usuários no banco de dados para utilização na aplicação",
                            UsuarioId = new Guid("26771815-19a3-4876-b934-f5696a9a58f2")
                        },
                        new
                        {
                            Id = new Guid("a294175d-6f9b-450d-8306-1e1f863d000e"),
                            DataVencimento = new DateTime(2025, 5, 26, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3597),
                            Descricao = "Precisamos fazer teste da aplicação para sabermos a carga de usuarios que a aplicação comporta",
                            Prioridade = 3,
                            ProjetoId = new Guid("b428a25b-28db-4190-8033-eedc63efc129"),
                            Status = 1,
                            Titulo = "Criação de teste utilizando k6",
                            UsuarioId = new Guid("2a948373-ac6b-4edd-bed0-c26741bc627a")
                        },
                        new
                        {
                            Id = new Guid("ebb552f8-e8bd-4ca4-9d02-e7f089256de8"),
                            DataVencimento = new DateTime(2025, 5, 26, 9, 4, 0, 753, DateTimeKind.Local).AddTicks(3600),
                            Descricao = "Precisamos criar a pipeline, e nela precisamos também, executar testes e gerar relatorio de cobertura.",
                            Prioridade = 1,
                            ProjetoId = new Guid("b428a25b-28db-4190-8033-eedc63efc129"),
                            Status = 1,
                            Titulo = "Criação pipeline Gerenciador de Tarefas",
                            UsuarioId = new Guid("2a948373-ac6b-4edd-bed0-c26741bc627a")
                        });
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UsuarioId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a948373-ac6b-4edd-bed0-c26741bc627a"),
                            Nome = "Márcio Krüger"
                        },
                        new
                        {
                            Id = new Guid("26771815-19a3-4876-b934-f5696a9a58f2"),
                            Nome = "João da Silva"
                        });
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.HistoricoAlteracao", b =>
                {
                    b.HasOne("GerenciadorTarefas.Domain.Entities.Tarefa", "Tarefa")
                        .WithMany("HistoricoAlteracoes")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Tarefa", b =>
                {
                    b.HasOne("GerenciadorTarefas.Domain.Entities.Projeto", "Projeto")
                        .WithMany("Tarefa")
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciadorTarefas.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Tarefas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projeto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Projeto", b =>
                {
                    b.Navigation("Tarefa");
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Tarefa", b =>
                {
                    b.Navigation("HistoricoAlteracoes");
                });

            modelBuilder.Entity("GerenciadorTarefas.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Tarefas");
                });
#pragma warning restore 612, 618
        }
    }
}
